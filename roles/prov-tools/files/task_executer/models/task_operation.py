# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer.models.prov_patch import ProvPatch
from task_executer import util

from task_executer.models.prov_patch import ProvPatch  # noqa: E501

class TaskOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, task_id=None, op_code=None, _class=None, key_value=None, value=None, before_value=None, patch=None):  # noqa: E501
        """TaskOperation - a model defined in OpenAPI

        :param id: The id of this TaskOperation.  # noqa: E501
        :type id: str
        :param task_id: The task_id of this TaskOperation.  # noqa: E501
        :type task_id: str
        :param op_code: The op_code of this TaskOperation.  # noqa: E501
        :type op_code: str
        :param _class: The _class of this TaskOperation.  # noqa: E501
        :type _class: str
        :param key_value: The key_value of this TaskOperation.  # noqa: E501
        :type key_value: str
        :param value: The value of this TaskOperation.  # noqa: E501
        :type value: str
        :param before_value: The before_value of this TaskOperation.  # noqa: E501
        :type before_value: str
        :param patch: The patch of this TaskOperation.  # noqa: E501
        :type patch: List[ProvPatch]
        """
        self.openapi_types = {
            'id': str,
            'task_id': str,
            'op_code': str,
            '_class': str,
            'key_value': str,
            'value': str,
            'before_value': str,
            'patch': List[ProvPatch]
        }

        self.attribute_map = {
            'id': 'id',
            'task_id': 'taskId',
            'op_code': 'opCode',
            '_class': 'class',
            'key_value': 'keyValue',
            'value': 'value',
            'before_value': 'beforeValue',
            'patch': 'patch'
        }

        self._id = id
        self._task_id = task_id
        self._op_code = op_code
        self.__class = _class
        self._key_value = key_value
        self._value = value
        self._before_value = before_value
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt) -> 'TaskOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _taskOperation of this TaskOperation.  # noqa: E501
        :rtype: TaskOperation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TaskOperation.


        :return: The id of this TaskOperation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskOperation.


        :param id: The id of this TaskOperation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def task_id(self):
        """Gets the task_id of this TaskOperation.


        :return: The task_id of this TaskOperation.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskOperation.


        :param task_id: The task_id of this TaskOperation.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def op_code(self):
        """Gets the op_code of this TaskOperation.

        命令コード  # noqa: E501

        :return: The op_code of this TaskOperation.
        :rtype: str
        """
        return self._op_code

    @op_code.setter
    def op_code(self, op_code):
        """Sets the op_code of this TaskOperation.

        命令コード  # noqa: E501

        :param op_code: The op_code of this TaskOperation.
        :type op_code: str
        """
        allowed_values = ["add", "modify", "delete"]  # noqa: E501
        if op_code not in allowed_values:
            raise ValueError(
                "Invalid value for `op_code` ({0}), must be one of {1}"
                .format(op_code, allowed_values)
            )

        self._op_code = op_code

    @property
    def _class(self):
        """Gets the _class of this TaskOperation.

        操作対象のクラス（ ex. ActiveDirectory であれば、 User, Group のいずれか）  # noqa: E501

        :return: The _class of this TaskOperation.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this TaskOperation.

        操作対象のクラス（ ex. ActiveDirectory であれば、 User, Group のいずれか）  # noqa: E501

        :param _class: The _class of this TaskOperation.
        :type _class: str
        """

        self.__class = _class

    @property
    def key_value(self):
        """Gets the key_value of this TaskOperation.

        操作対象のインスタンスを指し示すキー属性の値  # noqa: E501

        :return: The key_value of this TaskOperation.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this TaskOperation.

        操作対象のインスタンスを指し示すキー属性の値  # noqa: E501

        :param key_value: The key_value of this TaskOperation.
        :type key_value: str
        """

        self._key_value = key_value

    @property
    def value(self):
        """Gets the value of this TaskOperation.

        変更後のオブジェクトの値を表す JSON オブジェクトの文字列表現  # noqa: E501

        :return: The value of this TaskOperation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TaskOperation.

        変更後のオブジェクトの値を表す JSON オブジェクトの文字列表現  # noqa: E501

        :param value: The value of this TaskOperation.
        :type value: str
        """

        self._value = value

    @property
    def before_value(self):
        """Gets the before_value of this TaskOperation.

        変更前のオブジェクトの値を表す JSON オブジェクトの文字列表現  # noqa: E501

        :return: The before_value of this TaskOperation.
        :rtype: str
        """
        return self._before_value

    @before_value.setter
    def before_value(self, before_value):
        """Sets the before_value of this TaskOperation.

        変更前のオブジェクトの値を表す JSON オブジェクトの文字列表現  # noqa: E501

        :param before_value: The before_value of this TaskOperation.
        :type before_value: str
        """

        self._before_value = before_value

    @property
    def patch(self):
        """Gets the patch of this TaskOperation.


        :return: The patch of this TaskOperation.
        :rtype: List[ProvPatch]
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this TaskOperation.


        :param patch: The patch of this TaskOperation.
        :type patch: List[ProvPatch]
        """

        self._patch = patch
