# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer.models.property_definition import PropertyDefinition
from task_executer.models.validation_definition import ValidationDefinition
import re
from task_executer import util

from task_executer.models.property_definition import PropertyDefinition  # noqa: E501
from task_executer.models.validation_definition import ValidationDefinition  # noqa: E501
import re  # noqa: E501

class ClassDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, display_name=None, description=None, property_definition_list=None, is_primary_and_nested_object=None, is_nested_object=None, key_property=None, sub_key_property=None, validation=None, output_ldap_schema=None, ldap_super_class=None):  # noqa: E501
        """ClassDefinition - a model defined in OpenAPI

        :param name: The name of this ClassDefinition.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this ClassDefinition.  # noqa: E501
        :type display_name: str
        :param description: The description of this ClassDefinition.  # noqa: E501
        :type description: str
        :param property_definition_list: The property_definition_list of this ClassDefinition.  # noqa: E501
        :type property_definition_list: List[PropertyDefinition]
        :param is_primary_and_nested_object: The is_primary_and_nested_object of this ClassDefinition.  # noqa: E501
        :type is_primary_and_nested_object: bool
        :param is_nested_object: The is_nested_object of this ClassDefinition.  # noqa: E501
        :type is_nested_object: bool
        :param key_property: The key_property of this ClassDefinition.  # noqa: E501
        :type key_property: str
        :param sub_key_property: The sub_key_property of this ClassDefinition.  # noqa: E501
        :type sub_key_property: List[str]
        :param validation: The validation of this ClassDefinition.  # noqa: E501
        :type validation: List[ValidationDefinition]
        :param output_ldap_schema: The output_ldap_schema of this ClassDefinition.  # noqa: E501
        :type output_ldap_schema: bool
        :param ldap_super_class: The ldap_super_class of this ClassDefinition.  # noqa: E501
        :type ldap_super_class: str
        """
        self.openapi_types = {
            'name': str,
            'display_name': str,
            'description': str,
            'property_definition_list': List[PropertyDefinition],
            'is_primary_and_nested_object': bool,
            'is_nested_object': bool,
            'key_property': str,
            'sub_key_property': List[str],
            'validation': List[ValidationDefinition],
            'output_ldap_schema': bool,
            'ldap_super_class': str
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'displayName',
            'description': 'description',
            'property_definition_list': 'propertyDefinitionList',
            'is_primary_and_nested_object': 'isPrimaryAndNestedObject',
            'is_nested_object': 'isNestedObject',
            'key_property': 'keyProperty',
            'sub_key_property': 'subKeyProperty',
            'validation': 'validation',
            'output_ldap_schema': 'outputLdapSchema',
            'ldap_super_class': 'ldapSuperClass'
        }

        self._name = name
        self._display_name = display_name
        self._description = description
        self._property_definition_list = property_definition_list
        self._is_primary_and_nested_object = is_primary_and_nested_object
        self._is_nested_object = is_nested_object
        self._key_property = key_property
        self._sub_key_property = sub_key_property
        self._validation = validation
        self._output_ldap_schema = output_ldap_schema
        self._ldap_super_class = ldap_super_class

    @classmethod
    def from_dict(cls, dikt) -> 'ClassDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _classDefinition of this ClassDefinition.  # noqa: E501
        :rtype: ClassDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ClassDefinition.

        クラスの名前  # noqa: E501

        :return: The name of this ClassDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClassDefinition.

        クラスの名前  # noqa: E501

        :param name: The name of this ClassDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and not re.search(r'^[A-Za-z][0-9A-Za-z_]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z][0-9A-Za-z_]*$/`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ClassDefinition.

        クラスの表示名  # noqa: E501

        :return: The display_name of this ClassDefinition.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClassDefinition.

        クラスの表示名  # noqa: E501

        :param display_name: The display_name of this ClassDefinition.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ClassDefinition.

        クラスの説明 - ヘルプの生成に使用される  # noqa: E501

        :return: The description of this ClassDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClassDefinition.

        クラスの説明 - ヘルプの生成に使用される  # noqa: E501

        :param description: The description of this ClassDefinition.
        :type description: str
        """

        self._description = description

    @property
    def property_definition_list(self):
        """Gets the property_definition_list of this ClassDefinition.


        :return: The property_definition_list of this ClassDefinition.
        :rtype: List[PropertyDefinition]
        """
        return self._property_definition_list

    @property_definition_list.setter
    def property_definition_list(self, property_definition_list):
        """Sets the property_definition_list of this ClassDefinition.


        :param property_definition_list: The property_definition_list of this ClassDefinition.
        :type property_definition_list: List[PropertyDefinition]
        """
        if property_definition_list is None:
            raise ValueError("Invalid value for `property_definition_list`, must not be `None`")  # noqa: E501

        self._property_definition_list = property_definition_list

    @property
    def is_primary_and_nested_object(self):
        """Gets the is_primary_and_nested_object of this ClassDefinition.

        クラスがデータベース上のトップレベルに出現し、さらに別のクラスで導出式により内包されているように出力されるかを示すフラグ。兼用する場合は true  # noqa: E501

        :return: The is_primary_and_nested_object of this ClassDefinition.
        :rtype: bool
        """
        return self._is_primary_and_nested_object

    @is_primary_and_nested_object.setter
    def is_primary_and_nested_object(self, is_primary_and_nested_object):
        """Sets the is_primary_and_nested_object of this ClassDefinition.

        クラスがデータベース上のトップレベルに出現し、さらに別のクラスで導出式により内包されているように出力されるかを示すフラグ。兼用する場合は true  # noqa: E501

        :param is_primary_and_nested_object: The is_primary_and_nested_object of this ClassDefinition.
        :type is_primary_and_nested_object: bool
        """

        self._is_primary_and_nested_object = is_primary_and_nested_object

    @property
    def is_nested_object(self):
        """Gets the is_nested_object of this ClassDefinition.

        クラスがデータベース上のトップレベルに出現するか、別のクラスに内包されるかを示すフラグ。内包される場合は true  # noqa: E501

        :return: The is_nested_object of this ClassDefinition.
        :rtype: bool
        """
        return self._is_nested_object

    @is_nested_object.setter
    def is_nested_object(self, is_nested_object):
        """Sets the is_nested_object of this ClassDefinition.

        クラスがデータベース上のトップレベルに出現するか、別のクラスに内包されるかを示すフラグ。内包される場合は true  # noqa: E501

        :param is_nested_object: The is_nested_object of this ClassDefinition.
        :type is_nested_object: bool
        """

        self._is_nested_object = is_nested_object

    @property
    def key_property(self):
        """Gets the key_property of this ClassDefinition.

        キーとなる属性の名前  # noqa: E501

        :return: The key_property of this ClassDefinition.
        :rtype: str
        """
        return self._key_property

    @key_property.setter
    def key_property(self, key_property):
        """Sets the key_property of this ClassDefinition.

        キーとなる属性の名前  # noqa: E501

        :param key_property: The key_property of this ClassDefinition.
        :type key_property: str
        """
        if key_property is not None and not re.search(r'^[A-Za-z][0-9A-Za-z_]*$', key_property):  # noqa: E501
            raise ValueError("Invalid value for `key_property`, must be a follow pattern or equal to `/^[A-Za-z][0-9A-Za-z_]*$/`")  # noqa: E501

        self._key_property = key_property

    @property
    def sub_key_property(self):
        """Gets the sub_key_property of this ClassDefinition.


        :return: The sub_key_property of this ClassDefinition.
        :rtype: List[str]
        """
        return self._sub_key_property

    @sub_key_property.setter
    def sub_key_property(self, sub_key_property):
        """Sets the sub_key_property of this ClassDefinition.


        :param sub_key_property: The sub_key_property of this ClassDefinition.
        :type sub_key_property: List[str]
        """

        self._sub_key_property = sub_key_property

    @property
    def validation(self):
        """Gets the validation of this ClassDefinition.


        :return: The validation of this ClassDefinition.
        :rtype: List[ValidationDefinition]
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this ClassDefinition.


        :param validation: The validation of this ClassDefinition.
        :type validation: List[ValidationDefinition]
        """

        self._validation = validation

    @property
    def output_ldap_schema(self):
        """Gets the output_ldap_schema of this ClassDefinition.

        OpenLDAP へのプロビジョニングで、このクラスのスキーマを生成するかいなかを表すフラグ  # noqa: E501

        :return: The output_ldap_schema of this ClassDefinition.
        :rtype: bool
        """
        return self._output_ldap_schema

    @output_ldap_schema.setter
    def output_ldap_schema(self, output_ldap_schema):
        """Sets the output_ldap_schema of this ClassDefinition.

        OpenLDAP へのプロビジョニングで、このクラスのスキーマを生成するかいなかを表すフラグ  # noqa: E501

        :param output_ldap_schema: The output_ldap_schema of this ClassDefinition.
        :type output_ldap_schema: bool
        """

        self._output_ldap_schema = output_ldap_schema

    @property
    def ldap_super_class(self):
        """Gets the ldap_super_class of this ClassDefinition.

        このクラスを OpenLDAP 上のスキーマへのプロビジョニングする際に、スーパークラスとして指定するクラスの名前  # noqa: E501

        :return: The ldap_super_class of this ClassDefinition.
        :rtype: str
        """
        return self._ldap_super_class

    @ldap_super_class.setter
    def ldap_super_class(self, ldap_super_class):
        """Sets the ldap_super_class of this ClassDefinition.

        このクラスを OpenLDAP 上のスキーマへのプロビジョニングする際に、スーパークラスとして指定するクラスの名前  # noqa: E501

        :param ldap_super_class: The ldap_super_class of this ClassDefinition.
        :type ldap_super_class: str
        """
        if ldap_super_class is not None and not re.search(r'^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$', ldap_super_class):  # noqa: E501
            raise ValueError("Invalid value for `ldap_super_class`, must be a follow pattern or equal to `/^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$/`")  # noqa: E501

        self._ldap_super_class = ldap_super_class
