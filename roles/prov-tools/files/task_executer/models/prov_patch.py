# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
import re
from task_executer import util

import re  # noqa: E501

class ProvPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_name=None, diff=None):  # noqa: E501
        """ProvPatch - a model defined in OpenAPI

        :param property_name: The property_name of this ProvPatch.  # noqa: E501
        :type property_name: str
        :param diff: The diff of this ProvPatch.  # noqa: E501
        :type diff: str
        """
        self.openapi_types = {
            'property_name': str,
            'diff': str
        }

        self.attribute_map = {
            'property_name': 'propertyName',
            'diff': 'diff'
        }

        self._property_name = property_name
        self._diff = diff

    @classmethod
    def from_dict(cls, dikt) -> 'ProvPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _provPatch of this ProvPatch.  # noqa: E501
        :rtype: ProvPatch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_name(self):
        """Gets the property_name of this ProvPatch.

        更新対象属性名  # noqa: E501

        :return: The property_name of this ProvPatch.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ProvPatch.

        更新対象属性名  # noqa: E501

        :param property_name: The property_name of this ProvPatch.
        :type property_name: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")  # noqa: E501
        if property_name is not None and not re.search(r'^[A-Za-z][0-9A-Za-z_]*$', property_name):  # noqa: E501
            raise ValueError("Invalid value for `property_name`, must be a follow pattern or equal to `/^[A-Za-z][0-9A-Za-z_]*$/`")  # noqa: E501

        self._property_name = property_name

    @property
    def diff(self):
        """Gets the diff of this ProvPatch.

        更新内容を表す JSONDiffPatch オブジェクトの文字列表現  # noqa: E501

        :return: The diff of this ProvPatch.
        :rtype: str
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this ProvPatch.

        更新内容を表す JSONDiffPatch オブジェクトの文字列表現  # noqa: E501

        :param diff: The diff of this ProvPatch.
        :type diff: str
        """
        if diff is None:
            raise ValueError("Invalid value for `diff`, must not be `None`")  # noqa: E501

        self._diff = diff
