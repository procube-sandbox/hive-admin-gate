# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer.models.class_prov_setting import ClassProvSetting
from task_executer.models.provisioning_setting_dependency import ProvisioningSettingDependency
import re
from task_executer import util

from task_executer.models.class_prov_setting import ClassProvSetting  # noqa: E501
from task_executer.models.provisioning_setting_dependency import ProvisioningSettingDependency  # noqa: E501
import re  # noqa: E501

class ProvSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, display_name=None, description=None, database=None, type=None, host=None, port=None, path=None, secure_connection=None, loginname=None, password=None, class_setting=None, dependencies_for_add_modify=None, dependencies_for_delete=None, prompt=None, timeout=None, with_header=None, op_field_name=None, add_op=None, modify_op=None, delete_op=None, encode=None, date_format=None, datetime_format=None, rdbms_type=None, rdb_database=None, append_only=None, ignore_zero_result=None, ignore_multi_result=None, leaf_class=None, output_all=None, stop=None, ignore=None):  # noqa: E501
        """ProvSetting - a model defined in OpenAPI

        :param name: The name of this ProvSetting.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this ProvSetting.  # noqa: E501
        :type display_name: str
        :param description: The description of this ProvSetting.  # noqa: E501
        :type description: str
        :param database: The database of this ProvSetting.  # noqa: E501
        :type database: str
        :param type: The type of this ProvSetting.  # noqa: E501
        :type type: str
        :param host: The host of this ProvSetting.  # noqa: E501
        :type host: str
        :param port: The port of this ProvSetting.  # noqa: E501
        :type port: int
        :param path: The path of this ProvSetting.  # noqa: E501
        :type path: str
        :param secure_connection: The secure_connection of this ProvSetting.  # noqa: E501
        :type secure_connection: str
        :param loginname: The loginname of this ProvSetting.  # noqa: E501
        :type loginname: str
        :param password: The password of this ProvSetting.  # noqa: E501
        :type password: str
        :param class_setting: The class_setting of this ProvSetting.  # noqa: E501
        :type class_setting: List[ClassProvSetting]
        :param dependencies_for_add_modify: The dependencies_for_add_modify of this ProvSetting.  # noqa: E501
        :type dependencies_for_add_modify: List[ProvisioningSettingDependency]
        :param dependencies_for_delete: The dependencies_for_delete of this ProvSetting.  # noqa: E501
        :type dependencies_for_delete: List[ProvisioningSettingDependency]
        :param prompt: The prompt of this ProvSetting.  # noqa: E501
        :type prompt: str
        :param timeout: The timeout of this ProvSetting.  # noqa: E501
        :type timeout: int
        :param with_header: The with_header of this ProvSetting.  # noqa: E501
        :type with_header: bool
        :param op_field_name: The op_field_name of this ProvSetting.  # noqa: E501
        :type op_field_name: str
        :param add_op: The add_op of this ProvSetting.  # noqa: E501
        :type add_op: str
        :param modify_op: The modify_op of this ProvSetting.  # noqa: E501
        :type modify_op: str
        :param delete_op: The delete_op of this ProvSetting.  # noqa: E501
        :type delete_op: str
        :param encode: The encode of this ProvSetting.  # noqa: E501
        :type encode: str
        :param date_format: The date_format of this ProvSetting.  # noqa: E501
        :type date_format: str
        :param datetime_format: The datetime_format of this ProvSetting.  # noqa: E501
        :type datetime_format: str
        :param rdbms_type: The rdbms_type of this ProvSetting.  # noqa: E501
        :type rdbms_type: str
        :param rdb_database: The rdb_database of this ProvSetting.  # noqa: E501
        :type rdb_database: str
        :param append_only: The append_only of this ProvSetting.  # noqa: E501
        :type append_only: bool
        :param ignore_zero_result: The ignore_zero_result of this ProvSetting.  # noqa: E501
        :type ignore_zero_result: bool
        :param ignore_multi_result: The ignore_multi_result of this ProvSetting.  # noqa: E501
        :type ignore_multi_result: bool
        :param leaf_class: The leaf_class of this ProvSetting.  # noqa: E501
        :type leaf_class: List[str]
        :param output_all: The output_all of this ProvSetting.  # noqa: E501
        :type output_all: bool
        :param stop: The stop of this ProvSetting.  # noqa: E501
        :type stop: bool
        :param ignore: The ignore of this ProvSetting.  # noqa: E501
        :type ignore: bool
        """
        self.openapi_types = {
            'name': str,
            'display_name': str,
            'description': str,
            'database': str,
            'type': str,
            'host': str,
            'port': int,
            'path': str,
            'secure_connection': str,
            'loginname': str,
            'password': str,
            'class_setting': List[ClassProvSetting],
            'dependencies_for_add_modify': List[ProvisioningSettingDependency],
            'dependencies_for_delete': List[ProvisioningSettingDependency],
            'prompt': str,
            'timeout': int,
            'with_header': bool,
            'op_field_name': str,
            'add_op': str,
            'modify_op': str,
            'delete_op': str,
            'encode': str,
            'date_format': str,
            'datetime_format': str,
            'rdbms_type': str,
            'rdb_database': str,
            'append_only': bool,
            'ignore_zero_result': bool,
            'ignore_multi_result': bool,
            'leaf_class': List[str],
            'output_all': bool,
            'stop': bool,
            'ignore': bool
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'displayName',
            'description': 'description',
            'database': 'database',
            'type': 'type',
            'host': 'host',
            'port': 'port',
            'path': 'path',
            'secure_connection': 'secureConnection',
            'loginname': 'loginname',
            'password': 'password',
            'class_setting': 'classSetting',
            'dependencies_for_add_modify': 'dependenciesForAddModify',
            'dependencies_for_delete': 'dependenciesForDelete',
            'prompt': 'prompt',
            'timeout': 'timeout',
            'with_header': 'withHeader',
            'op_field_name': 'opFieldName',
            'add_op': 'addOp',
            'modify_op': 'modifyOp',
            'delete_op': 'deleteOp',
            'encode': 'encode',
            'date_format': 'dateFormat',
            'datetime_format': 'datetimeFormat',
            'rdbms_type': 'rdbmsType',
            'rdb_database': 'rdbDatabase',
            'append_only': 'appendOnly',
            'ignore_zero_result': 'ignoreZeroResult',
            'ignore_multi_result': 'ignoreMultiResult',
            'leaf_class': 'leafClass',
            'output_all': 'outputAll',
            'stop': 'stop',
            'ignore': 'ignore'
        }

        self._name = name
        self._display_name = display_name
        self._description = description
        self._database = database
        self._type = type
        self._host = host
        self._port = port
        self._path = path
        self._secure_connection = secure_connection
        self._loginname = loginname
        self._password = password
        self._class_setting = class_setting
        self._dependencies_for_add_modify = dependencies_for_add_modify
        self._dependencies_for_delete = dependencies_for_delete
        self._prompt = prompt
        self._timeout = timeout
        self._with_header = with_header
        self._op_field_name = op_field_name
        self._add_op = add_op
        self._modify_op = modify_op
        self._delete_op = delete_op
        self._encode = encode
        self._date_format = date_format
        self._datetime_format = datetime_format
        self._rdbms_type = rdbms_type
        self._rdb_database = rdb_database
        self._append_only = append_only
        self._ignore_zero_result = ignore_zero_result
        self._ignore_multi_result = ignore_multi_result
        self._leaf_class = leaf_class
        self._output_all = output_all
        self._stop = stop
        self._ignore = ignore

    @classmethod
    def from_dict(cls, dikt) -> 'ProvSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _provSetting of this ProvSetting.  # noqa: E501
        :rtype: ProvSetting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProvSetting.

        プロビジョニング設定の名前  # noqa: E501

        :return: The name of this ProvSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvSetting.

        プロビジョニング設定の名前  # noqa: E501

        :param name: The name of this ProvSetting.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and not re.search(r'^[A-Za-z][0-9A-Za-z_]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z][0-9A-Za-z_]*$/`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ProvSetting.

        プロビジョニング設定の表示名  # noqa: E501

        :return: The display_name of this ProvSetting.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProvSetting.

        プロビジョニング設定の表示名  # noqa: E501

        :param display_name: The display_name of this ProvSetting.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ProvSetting.

        プロビジョニング設定の説明 - ヘルプの生成に使用される  # noqa: E501

        :return: The description of this ProvSetting.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProvSetting.

        プロビジョニング設定の説明 - ヘルプの生成に使用される  # noqa: E501

        :param description: The description of this ProvSetting.
        :type description: str
        """

        self._description = description

    @property
    def database(self):
        """Gets the database of this ProvSetting.

        連携するデータベースの名前  # noqa: E501

        :return: The database of this ProvSetting.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ProvSetting.

        連携するデータベースの名前  # noqa: E501

        :param database: The database of this ProvSetting.
        :type database: str
        """
        allowed_values = ["Repository", "Master"]  # noqa: E501
        if database not in allowed_values:
            raise ValueError(
                "Invalid value for `database` ({0}), must be one of {1}"
                .format(database, allowed_values)
            )

        self._database = database

    @property
    def type(self):
        """Gets the type of this ProvSetting.

        プロビジョニングの種類（＝タスクプランナーの種類） IDM2 では、以下の種類のプロビジョニングを提供する。 - LDAP: LDAPディレクトリへのプロビジョニングを実行する - RDB: リレーショナルデータベースへのプロビジョニングを実行する - OpenLDAPSchema: OpenLDAP のスキーマのプロビジョニングを実行する - OpenLDAPDB: OpenLDAP データベース設定オブジェクトのプロビジョニングを実行する - SSH+CSV: SCP で CSVファイルを転送し、相手システムの CLIコマンドを呼び出して、プロビジョニングを実行する - ActiveDirectory: Active Directory に対してプロビジョニングを実行する - Gadget: ガジェットの変更を InfoScoop に対してプロビジョニングする - CustomTaskExecutor: カスタムタスクエグゼキュータを呼び出す  # noqa: E501

        :return: The type of this ProvSetting.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProvSetting.

        プロビジョニングの種類（＝タスクプランナーの種類） IDM2 では、以下の種類のプロビジョニングを提供する。 - LDAP: LDAPディレクトリへのプロビジョニングを実行する - RDB: リレーショナルデータベースへのプロビジョニングを実行する - OpenLDAPSchema: OpenLDAP のスキーマのプロビジョニングを実行する - OpenLDAPDB: OpenLDAP データベース設定オブジェクトのプロビジョニングを実行する - SSH+CSV: SCP で CSVファイルを転送し、相手システムの CLIコマンドを呼び出して、プロビジョニングを実行する - ActiveDirectory: Active Directory に対してプロビジョニングを実行する - Gadget: ガジェットの変更を InfoScoop に対してプロビジョニングする - CustomTaskExecutor: カスタムタスクエグゼキュータを呼び出す  # noqa: E501

        :param type: The type of this ProvSetting.
        :type type: str
        """
        allowed_values = ["LDAP", "RDB", "OpenLDAPSchema", "OpenLDAPDB", "SSH+CSV", "ActiveDirectory", "Gadget", "CustomTaskExecutor"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def host(self):
        """Gets the host of this ProvSetting.

        プロビジョニング先のホスト名  # noqa: E501

        :return: The host of this ProvSetting.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ProvSetting.

        プロビジョニング先のホスト名  # noqa: E501

        :param host: The host of this ProvSetting.
        :type host: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ProvSetting.

        プロビジョニング先のホストに接続する際のポート番号 - 省略時は、それぞれ標準ポート番号  # noqa: E501

        :return: The port of this ProvSetting.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ProvSetting.

        プロビジョニング先のホストに接続する際のポート番号 - 省略時は、それぞれ標準ポート番号  # noqa: E501

        :param port: The port of this ProvSetting.
        :type port: int
        """

        self._port = port

    @property
    def path(self):
        """Gets the path of this ProvSetting.

        カスタムタスクエグゼキュータのパス  # noqa: E501

        :return: The path of this ProvSetting.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProvSetting.

        カスタムタスクエグゼキュータのパス  # noqa: E501

        :param path: The path of this ProvSetting.
        :type path: str
        """

        self._path = path

    @property
    def secure_connection(self):
        """Gets the secure_connection of this ProvSetting.

        プロビジョニング先のホストに接続する際に使用する暗号化設定 - 種別が LDAP の場合のみ指定可能 - ActiveDirectory は常に SSL 接続  # noqa: E501

        :return: The secure_connection of this ProvSetting.
        :rtype: str
        """
        return self._secure_connection

    @secure_connection.setter
    def secure_connection(self, secure_connection):
        """Sets the secure_connection of this ProvSetting.

        プロビジョニング先のホストに接続する際に使用する暗号化設定 - 種別が LDAP の場合のみ指定可能 - ActiveDirectory は常に SSL 接続  # noqa: E501

        :param secure_connection: The secure_connection of this ProvSetting.
        :type secure_connection: str
        """
        allowed_values = ["SSL", "STARTTLS"]  # noqa: E501
        if secure_connection not in allowed_values:
            raise ValueError(
                "Invalid value for `secure_connection` ({0}), must be one of {1}"
                .format(secure_connection, allowed_values)
            )

        self._secure_connection = secure_connection

    @property
    def loginname(self):
        """Gets the loginname of this ProvSetting.

        プロビジョニング先ホストにログインする際のユーザID。ただし、種別が LDAP である場合はバインドDN  # noqa: E501

        :return: The loginname of this ProvSetting.
        :rtype: str
        """
        return self._loginname

    @loginname.setter
    def loginname(self, loginname):
        """Sets the loginname of this ProvSetting.

        プロビジョニング先ホストにログインする際のユーザID。ただし、種別が LDAP である場合はバインドDN  # noqa: E501

        :param loginname: The loginname of this ProvSetting.
        :type loginname: str
        """

        self._loginname = loginname

    @property
    def password(self):
        """Gets the password of this ProvSetting.

        プロビジョニング先ホストにログインする際のパスワード  # noqa: E501

        :return: The password of this ProvSetting.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ProvSetting.

        プロビジョニング先ホストにログインする際のパスワード  # noqa: E501

        :param password: The password of this ProvSetting.
        :type password: str
        """

        self._password = password

    @property
    def class_setting(self):
        """Gets the class_setting of this ProvSetting.


        :return: The class_setting of this ProvSetting.
        :rtype: List[ClassProvSetting]
        """
        return self._class_setting

    @class_setting.setter
    def class_setting(self, class_setting):
        """Sets the class_setting of this ProvSetting.


        :param class_setting: The class_setting of this ProvSetting.
        :type class_setting: List[ClassProvSetting]
        """

        self._class_setting = class_setting

    @property
    def dependencies_for_add_modify(self):
        """Gets the dependencies_for_add_modify of this ProvSetting.


        :return: The dependencies_for_add_modify of this ProvSetting.
        :rtype: List[ProvisioningSettingDependency]
        """
        return self._dependencies_for_add_modify

    @dependencies_for_add_modify.setter
    def dependencies_for_add_modify(self, dependencies_for_add_modify):
        """Sets the dependencies_for_add_modify of this ProvSetting.


        :param dependencies_for_add_modify: The dependencies_for_add_modify of this ProvSetting.
        :type dependencies_for_add_modify: List[ProvisioningSettingDependency]
        """

        self._dependencies_for_add_modify = dependencies_for_add_modify

    @property
    def dependencies_for_delete(self):
        """Gets the dependencies_for_delete of this ProvSetting.


        :return: The dependencies_for_delete of this ProvSetting.
        :rtype: List[ProvisioningSettingDependency]
        """
        return self._dependencies_for_delete

    @dependencies_for_delete.setter
    def dependencies_for_delete(self, dependencies_for_delete):
        """Sets the dependencies_for_delete of this ProvSetting.


        :param dependencies_for_delete: The dependencies_for_delete of this ProvSetting.
        :type dependencies_for_delete: List[ProvisioningSettingDependency]
        """

        self._dependencies_for_delete = dependencies_for_delete

    @property
    def prompt(self):
        """Gets the prompt of this ProvSetting.

        種別が SSH+CSV であるときにコマンドが入力可能であると判断する文字列 - 省略時は、$, #, %のいずれでも対応  # noqa: E501

        :return: The prompt of this ProvSetting.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this ProvSetting.

        種別が SSH+CSV であるときにコマンドが入力可能であると判断する文字列 - 省略時は、$, #, %のいずれでも対応  # noqa: E501

        :param prompt: The prompt of this ProvSetting.
        :type prompt: str
        """

        self._prompt = prompt

    @property
    def timeout(self):
        """Gets the timeout of this ProvSetting.

        種別が SSH+CSV であるときにコマンドがタイムアウトと判断する秒数 - タイムアウトの秒数を経過すると SSH 接続を切断し、タスクの実行は失敗に失敗したとする。 - 省略時は、60秒  # noqa: E501

        :return: The timeout of this ProvSetting.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ProvSetting.

        種別が SSH+CSV であるときにコマンドがタイムアウトと判断する秒数 - タイムアウトの秒数を経過すると SSH 接続を切断し、タスクの実行は失敗に失敗したとする。 - 省略時は、60秒  # noqa: E501

        :param timeout: The timeout of this ProvSetting.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def with_header(self):
        """Gets the with_header of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルにヘッダ行を出力するか否かを表す。 - true の場合、ヘッダ行を出力する。 - ヘッダ行は属性 (properties) を出力する。マッピング (propertyNameMapping) を指定している属性の場合は先属性 (destinationProperty) を出力する。 - 第一列の更新種別は更新種別列名 (opFieldName) を用いる。  # noqa: E501

        :return: The with_header of this ProvSetting.
        :rtype: bool
        """
        return self._with_header

    @with_header.setter
    def with_header(self, with_header):
        """Sets the with_header of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルにヘッダ行を出力するか否かを表す。 - true の場合、ヘッダ行を出力する。 - ヘッダ行は属性 (properties) を出力する。マッピング (propertyNameMapping) を指定している属性の場合は先属性 (destinationProperty) を出力する。 - 第一列の更新種別は更新種別列名 (opFieldName) を用いる。  # noqa: E501

        :param with_header: The with_header of this ProvSetting.
        :type with_header: bool
        """

        self._with_header = with_header

    @property
    def op_field_name(self):
        """Gets the op_field_name of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する更新種別の列名。種別が RDB であるときは更新するテーブルのカラム名となり、必須。 - 種別が SSH+CSV の場合は、ヘッダ行フラグ (withHeader) が false の場合はこの値を指定しても列名は出力されない  # noqa: E501

        :return: The op_field_name of this ProvSetting.
        :rtype: str
        """
        return self._op_field_name

    @op_field_name.setter
    def op_field_name(self, op_field_name):
        """Sets the op_field_name of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する更新種別の列名。種別が RDB であるときは更新するテーブルのカラム名となり、必須。 - 種別が SSH+CSV の場合は、ヘッダ行フラグ (withHeader) が false の場合はこの値を指定しても列名は出力されない  # noqa: E501

        :param op_field_name: The op_field_name of this ProvSetting.
        :type op_field_name: str
        """

        self._op_field_name = op_field_name

    @property
    def add_op(self):
        """Gets the add_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する追加を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する追加を指示する更新種別列の値。  # noqa: E501

        :return: The add_op of this ProvSetting.
        :rtype: str
        """
        return self._add_op

    @add_op.setter
    def add_op(self, add_op):
        """Sets the add_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する追加を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する追加を指示する更新種別列の値。  # noqa: E501

        :param add_op: The add_op of this ProvSetting.
        :type add_op: str
        """

        self._add_op = add_op

    @property
    def modify_op(self):
        """Gets the modify_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する変更を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する変更を指示する更新種別列の値。  # noqa: E501

        :return: The modify_op of this ProvSetting.
        :rtype: str
        """
        return self._modify_op

    @modify_op.setter
    def modify_op(self, modify_op):
        """Sets the modify_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する変更を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する変更を指示する更新種別列の値。  # noqa: E501

        :param modify_op: The modify_op of this ProvSetting.
        :type modify_op: str
        """

        self._modify_op = modify_op

    @property
    def delete_op(self):
        """Gets the delete_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する削除を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する削除を指示する更新種別列の値。  # noqa: E501

        :return: The delete_op of this ProvSetting.
        :rtype: str
        """
        return self._delete_op

    @delete_op.setter
    def delete_op(self, delete_op):
        """Sets the delete_op of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する削除を指示する更新種別列の値。種別が RDB であるときはテーブルに挿入する削除を指示する更新種別列の値。  # noqa: E501

        :param delete_op: The delete_op of this ProvSetting.
        :type delete_op: str
        """

        self._delete_op = delete_op

    @property
    def encode(self):
        """Gets the encode of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルの文字コード  # noqa: E501

        :return: The encode of this ProvSetting.
        :rtype: str
        """
        return self._encode

    @encode.setter
    def encode(self, encode):
        """Sets the encode of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルの文字コード  # noqa: E501

        :param encode: The encode of this ProvSetting.
        :type encode: str
        """
        allowed_values = ["UTF-8", "Shift-JIS"]  # noqa: E501
        if encode not in allowed_values:
            raise ValueError(
                "Invalid value for `encode` ({0}), must be one of {1}"
                .format(encode, allowed_values)
            )

        self._encode = encode

    @property
    def date_format(self):
        """Gets the date_format of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する日付のフォーマット。種別が RDB であるときはデータ型が日付の属性を文字列に変換、また逆に文字列の属性を日付に解釈して登録する際に利用する。java の java.text.SimpleDateFormat のフォーマットで指定する。 - 省略時は、yyyy-MM-dd  # noqa: E501

        :return: The date_format of this ProvSetting.
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this ProvSetting.

        種別が SSH+CSV であるときに CSV ファイルに出力する日付のフォーマット。種別が RDB であるときはデータ型が日付の属性を文字列に変換、また逆に文字列の属性を日付に解釈して登録する際に利用する。java の java.text.SimpleDateFormat のフォーマットで指定する。 - 省略時は、yyyy-MM-dd  # noqa: E501

        :param date_format: The date_format of this ProvSetting.
        :type date_format: str
        """

        self._date_format = date_format

    @property
    def datetime_format(self):
        """Gets the datetime_format of this ProvSetting.

        種種別が SSH+CSV であるときに CSV ファイルに出力する日時のフォーマット。種別が RDB であるときはデータ型が日時の属性を文字列に変換、また逆に文字列の属性を日時に解釈して登録する際に利用する。java の java.text.SimpleDateFormat のフォーマットで指定する。 - 省略時は、yyyy-MM-dd HH:mm:ss  # noqa: E501

        :return: The datetime_format of this ProvSetting.
        :rtype: str
        """
        return self._datetime_format

    @datetime_format.setter
    def datetime_format(self, datetime_format):
        """Sets the datetime_format of this ProvSetting.

        種種別が SSH+CSV であるときに CSV ファイルに出力する日時のフォーマット。種別が RDB であるときはデータ型が日時の属性を文字列に変換、また逆に文字列の属性を日時に解釈して登録する際に利用する。java の java.text.SimpleDateFormat のフォーマットで指定する。 - 省略時は、yyyy-MM-dd HH:mm:ss  # noqa: E501

        :param datetime_format: The datetime_format of this ProvSetting.
        :type datetime_format: str
        """

        self._datetime_format = datetime_format

    @property
    def rdbms_type(self):
        """Gets the rdbms_type of this ProvSetting.

        種別が RDB であるときの RDBMS の種類。  # noqa: E501

        :return: The rdbms_type of this ProvSetting.
        :rtype: str
        """
        return self._rdbms_type

    @rdbms_type.setter
    def rdbms_type(self, rdbms_type):
        """Sets the rdbms_type of this ProvSetting.

        種別が RDB であるときの RDBMS の種類。  # noqa: E501

        :param rdbms_type: The rdbms_type of this ProvSetting.
        :type rdbms_type: str
        """
        allowed_values = ["PostgreSQL", "MySQL"]  # noqa: E501
        if rdbms_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rdbms_type` ({0}), must be one of {1}"
                .format(rdbms_type, allowed_values)
            )

        self._rdbms_type = rdbms_type

    @property
    def rdb_database(self):
        """Gets the rdb_database of this ProvSetting.

        種別が RDB であるときのデータベース名。  # noqa: E501

        :return: The rdb_database of this ProvSetting.
        :rtype: str
        """
        return self._rdb_database

    @rdb_database.setter
    def rdb_database(self, rdb_database):
        """Sets the rdb_database of this ProvSetting.

        種別が RDB であるときのデータベース名。  # noqa: E501

        :param rdb_database: The rdb_database of this ProvSetting.
        :type rdb_database: str
        """

        self._rdb_database = rdb_database

    @property
    def append_only(self):
        """Gets the append_only of this ProvSetting.

        種別が RDB であるときの SQL の生成ルール。 - true の場合、プロビジョニング操作命令の命令コードの値に関わらず INSERT を実行する - false の場合、命令コードの値を参照し add の場合は INSERT, modify の場合は UPDATE, delete の場合は DELETE を実行する  # noqa: E501

        :return: The append_only of this ProvSetting.
        :rtype: bool
        """
        return self._append_only

    @append_only.setter
    def append_only(self, append_only):
        """Sets the append_only of this ProvSetting.

        種別が RDB であるときの SQL の生成ルール。 - true の場合、プロビジョニング操作命令の命令コードの値に関わらず INSERT を実行する - false の場合、命令コードの値を参照し add の場合は INSERT, modify の場合は UPDATE, delete の場合は DELETE を実行する  # noqa: E501

        :param append_only: The append_only of this ProvSetting.
        :type append_only: bool
        """

        self._append_only = append_only

    @property
    def ignore_zero_result(self):
        """Gets the ignore_zero_result of this ProvSetting.

        種別が RDB であるときの UPDATE, DELETE の実行結果が、実行結果が 0 件の場合も成功として扱うか否かを示すフラグ。 - true の場合、実行結果が 0 件も成功として扱う  # noqa: E501

        :return: The ignore_zero_result of this ProvSetting.
        :rtype: bool
        """
        return self._ignore_zero_result

    @ignore_zero_result.setter
    def ignore_zero_result(self, ignore_zero_result):
        """Sets the ignore_zero_result of this ProvSetting.

        種別が RDB であるときの UPDATE, DELETE の実行結果が、実行結果が 0 件の場合も成功として扱うか否かを示すフラグ。 - true の場合、実行結果が 0 件も成功として扱う  # noqa: E501

        :param ignore_zero_result: The ignore_zero_result of this ProvSetting.
        :type ignore_zero_result: bool
        """

        self._ignore_zero_result = ignore_zero_result

    @property
    def ignore_multi_result(self):
        """Gets the ignore_multi_result of this ProvSetting.

        種別が RDB であるときの UPDATE, DELETE の実行結果が、複数件の場合も成功として扱うか否かを示すフラグ。 - true の場合、実行結果が複数件も成功として扱う  # noqa: E501

        :return: The ignore_multi_result of this ProvSetting.
        :rtype: bool
        """
        return self._ignore_multi_result

    @ignore_multi_result.setter
    def ignore_multi_result(self, ignore_multi_result):
        """Sets the ignore_multi_result of this ProvSetting.

        種別が RDB であるときの UPDATE, DELETE の実行結果が、複数件の場合も成功として扱うか否かを示すフラグ。 - true の場合、実行結果が複数件も成功として扱う  # noqa: E501

        :param ignore_multi_result: The ignore_multi_result of this ProvSetting.
        :type ignore_multi_result: bool
        """

        self._ignore_multi_result = ignore_multi_result

    @property
    def leaf_class(self):
        """Gets the leaf_class of this ProvSetting.


        :return: The leaf_class of this ProvSetting.
        :rtype: List[str]
        """
        return self._leaf_class

    @leaf_class.setter
    def leaf_class(self, leaf_class):
        """Sets the leaf_class of this ProvSetting.


        :param leaf_class: The leaf_class of this ProvSetting.
        :type leaf_class: List[str]
        """

        self._leaf_class = leaf_class

    @property
    def output_all(self):
        """Gets the output_all of this ProvSetting.

        このプロビジョニング設定によるプロビジョニングで全件を出力するか否かを示すフラグ。true の場合、プロビジョニングが発効されると常に全件出力を行います。SSH+CSVの場合は更新種別の列が出力されなくなります。  # noqa: E501

        :return: The output_all of this ProvSetting.
        :rtype: bool
        """
        return self._output_all

    @output_all.setter
    def output_all(self, output_all):
        """Sets the output_all of this ProvSetting.

        このプロビジョニング設定によるプロビジョニングで全件を出力するか否かを示すフラグ。true の場合、プロビジョニングが発効されると常に全件出力を行います。SSH+CSVの場合は更新種別の列が出力されなくなります。  # noqa: E501

        :param output_all: The output_all of this ProvSetting.
        :type output_all: bool
        """

        self._output_all = output_all

    @property
    def stop(self):
        """Gets the stop of this ProvSetting.

        このプロビジョニング設定によるプロビジョニングを一時的に停止するか否かを示すフラグ。一時停止している間に発効したプロビジョニングについては、そのタスクの実行が保留され、プロビジョニング先へは配信されません。一時停止を解除すると、保留されていたタスクが実行されます。  # noqa: E501

        :return: The stop of this ProvSetting.
        :rtype: bool
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this ProvSetting.

        このプロビジョニング設定によるプロビジョニングを一時的に停止するか否かを示すフラグ。一時停止している間に発効したプロビジョニングについては、そのタスクの実行が保留され、プロビジョニング先へは配信されません。一時停止を解除すると、保留されていたタスクが実行されます。  # noqa: E501

        :param stop: The stop of this ProvSetting.
        :type stop: bool
        """

        self._stop = stop

    @property
    def ignore(self):
        """Gets the ignore of this ProvSetting.

        このプロビジョニング設定が無効であるか否かを示すフラグ。無効化されている間に発効したプロビジョニングについては、このプロビジョニング設定は無視され、変更内容はプロビジョニング先に対して消失しますので、注意してください。  # noqa: E501

        :return: The ignore of this ProvSetting.
        :rtype: bool
        """
        return self._ignore

    @ignore.setter
    def ignore(self, ignore):
        """Sets the ignore of this ProvSetting.

        このプロビジョニング設定が無効であるか否かを示すフラグ。無効化されている間に発効したプロビジョニングについては、このプロビジョニング設定は無視され、変更内容はプロビジョニング先に対して消失しますので、注意してください。  # noqa: E501

        :param ignore: The ignore of this ProvSetting.
        :type ignore: bool
        """

        self._ignore = ignore
