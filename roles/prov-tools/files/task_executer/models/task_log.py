# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer import util


class TaskLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_id=None, task_id=None, prov_setting_name=None, timestamp=None, code=None, level=None, message=None, context=None, informed_datetime=None):  # noqa: E501
        """TaskLog - a model defined in OpenAPI

        :param log_id: The log_id of this TaskLog.  # noqa: E501
        :type log_id: str
        :param task_id: The task_id of this TaskLog.  # noqa: E501
        :type task_id: str
        :param prov_setting_name: The prov_setting_name of this TaskLog.  # noqa: E501
        :type prov_setting_name: str
        :param timestamp: The timestamp of this TaskLog.  # noqa: E501
        :type timestamp: datetime
        :param code: The code of this TaskLog.  # noqa: E501
        :type code: str
        :param level: The level of this TaskLog.  # noqa: E501
        :type level: str
        :param message: The message of this TaskLog.  # noqa: E501
        :type message: str
        :param context: The context of this TaskLog.  # noqa: E501
        :type context: str
        :param informed_datetime: The informed_datetime of this TaskLog.  # noqa: E501
        :type informed_datetime: datetime
        """
        self.openapi_types = {
            'log_id': str,
            'task_id': str,
            'prov_setting_name': str,
            'timestamp': datetime,
            'code': str,
            'level': str,
            'message': str,
            'context': str,
            'informed_datetime': datetime
        }

        self.attribute_map = {
            'log_id': 'logId',
            'task_id': 'taskId',
            'prov_setting_name': 'provSettingName',
            'timestamp': 'timestamp',
            'code': 'code',
            'level': 'level',
            'message': 'message',
            'context': 'context',
            'informed_datetime': 'informedDatetime'
        }

        self._log_id = log_id
        self._task_id = task_id
        self._prov_setting_name = prov_setting_name
        self._timestamp = timestamp
        self._code = code
        self._level = level
        self._message = message
        self._context = context
        self._informed_datetime = informed_datetime

    @classmethod
    def from_dict(cls, dikt) -> 'TaskLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _taskLog of this TaskLog.  # noqa: E501
        :rtype: TaskLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_id(self):
        """Gets the log_id of this TaskLog.

        ログを一意に示す文字列。  # noqa: E501

        :return: The log_id of this TaskLog.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this TaskLog.

        ログを一意に示す文字列。  # noqa: E501

        :param log_id: The log_id of this TaskLog.
        :type log_id: str
        """
        if log_id is None:
            raise ValueError("Invalid value for `log_id`, must not be `None`")  # noqa: E501

        self._log_id = log_id

    @property
    def task_id(self):
        """Gets the task_id of this TaskLog.

        タスク処理の ID  # noqa: E501

        :return: The task_id of this TaskLog.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskLog.

        タスク処理の ID  # noqa: E501

        :param task_id: The task_id of this TaskLog.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def prov_setting_name(self):
        """Gets the prov_setting_name of this TaskLog.

        タスク生成元となったプロビジョニング設定の名称。  # noqa: E501

        :return: The prov_setting_name of this TaskLog.
        :rtype: str
        """
        return self._prov_setting_name

    @prov_setting_name.setter
    def prov_setting_name(self, prov_setting_name):
        """Sets the prov_setting_name of this TaskLog.

        タスク生成元となったプロビジョニング設定の名称。  # noqa: E501

        :param prov_setting_name: The prov_setting_name of this TaskLog.
        :type prov_setting_name: str
        """
        if prov_setting_name is None:
            raise ValueError("Invalid value for `prov_setting_name`, must not be `None`")  # noqa: E501

        self._prov_setting_name = prov_setting_name

    @property
    def timestamp(self):
        """Gets the timestamp of this TaskLog.

        ログの日時  # noqa: E501

        :return: The timestamp of this TaskLog.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TaskLog.

        ログの日時  # noqa: E501

        :param timestamp: The timestamp of this TaskLog.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def code(self):
        """Gets the code of this TaskLog.

        ログメッセージの分類を表すコードをあらわす。コード体系は IDM2 ログと共通  # noqa: E501

        :return: The code of this TaskLog.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaskLog.

        ログメッセージの分類を表すコードをあらわす。コード体系は IDM2 ログと共通  # noqa: E501

        :param code: The code of this TaskLog.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def level(self):
        """Gets the level of this TaskLog.

        ログレベルを表す  # noqa: E501

        :return: The level of this TaskLog.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this TaskLog.

        ログレベルを表す  # noqa: E501

        :param level: The level of this TaskLog.
        :type level: str
        """
        allowed_values = ["ERROR", "WARN", "INFO"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """Gets the message of this TaskLog.

        ログメッセージ  # noqa: E501

        :return: The message of this TaskLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskLog.

        ログメッセージ  # noqa: E501

        :param message: The message of this TaskLog.
        :type message: str
        """

        self._message = message

    @property
    def context(self):
        """Gets the context of this TaskLog.

        ログメッセージの生成元となる文脈情報。 JSON 形式で保持する。  # noqa: E501

        :return: The context of this TaskLog.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TaskLog.

        ログメッセージの生成元となる文脈情報。 JSON 形式で保持する。  # noqa: E501

        :param context: The context of this TaskLog.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def informed_datetime(self):
        """Gets the informed_datetime of this TaskLog.

        ERRORレポートのメール送信を行った日時  # noqa: E501

        :return: The informed_datetime of this TaskLog.
        :rtype: datetime
        """
        return self._informed_datetime

    @informed_datetime.setter
    def informed_datetime(self, informed_datetime):
        """Sets the informed_datetime of this TaskLog.

        ERRORレポートのメール送信を行った日時  # noqa: E501

        :param informed_datetime: The informed_datetime of this TaskLog.
        :type informed_datetime: datetime
        """

        self._informed_datetime = informed_datetime
