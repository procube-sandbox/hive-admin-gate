# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer.models.task_log import TaskLog
from task_executer.models.task_operation import TaskOperation
import re
from task_executer import util

from task_executer.models.task_log import TaskLog  # noqa: E501
from task_executer.models.task_operation import TaskOperation  # noqa: E501
import re  # noqa: E501

class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, request_id=None, name=None, prov_setting_name=None, result=None, task_type=None, operations=None, registerd_datetime=None, first_executed_date_time=None, last_executed_date_time=None, executed_times=None, failed_data=None, logs=None):  # noqa: E501
        """Task - a model defined in OpenAPI

        :param id: The id of this Task.  # noqa: E501
        :type id: str
        :param request_id: The request_id of this Task.  # noqa: E501
        :type request_id: str
        :param name: The name of this Task.  # noqa: E501
        :type name: str
        :param prov_setting_name: The prov_setting_name of this Task.  # noqa: E501
        :type prov_setting_name: str
        :param result: The result of this Task.  # noqa: E501
        :type result: str
        :param task_type: The task_type of this Task.  # noqa: E501
        :type task_type: str
        :param operations: The operations of this Task.  # noqa: E501
        :type operations: List[TaskOperation]
        :param registerd_datetime: The registerd_datetime of this Task.  # noqa: E501
        :type registerd_datetime: datetime
        :param first_executed_date_time: The first_executed_date_time of this Task.  # noqa: E501
        :type first_executed_date_time: datetime
        :param last_executed_date_time: The last_executed_date_time of this Task.  # noqa: E501
        :type last_executed_date_time: datetime
        :param executed_times: The executed_times of this Task.  # noqa: E501
        :type executed_times: int
        :param failed_data: The failed_data of this Task.  # noqa: E501
        :type failed_data: str
        :param logs: The logs of this Task.  # noqa: E501
        :type logs: List[TaskLog]
        """
        self.openapi_types = {
            'id': str,
            'request_id': str,
            'name': str,
            'prov_setting_name': str,
            'result': str,
            'task_type': str,
            'operations': List[TaskOperation],
            'registerd_datetime': datetime,
            'first_executed_date_time': datetime,
            'last_executed_date_time': datetime,
            'executed_times': int,
            'failed_data': str,
            'logs': List[TaskLog]
        }

        self.attribute_map = {
            'id': 'id',
            'request_id': 'requestId',
            'name': 'name',
            'prov_setting_name': 'provSettingName',
            'result': 'result',
            'task_type': 'taskType',
            'operations': 'operations',
            'registerd_datetime': 'registerdDatetime',
            'first_executed_date_time': 'firstExecutedDateTime',
            'last_executed_date_time': 'lastExecutedDateTime',
            'executed_times': 'executedTimes',
            'failed_data': 'failedData',
            'logs': 'logs'
        }

        self._id = id
        self._request_id = request_id
        self._name = name
        self._prov_setting_name = prov_setting_name
        self._result = result
        self._task_type = task_type
        self._operations = operations
        self._registerd_datetime = registerd_datetime
        self._first_executed_date_time = first_executed_date_time
        self._last_executed_date_time = last_executed_date_time
        self._executed_times = executed_times
        self._failed_data = failed_data
        self._logs = logs

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Task.

        タスク処理の ID  # noqa: E501

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        タスク処理の ID  # noqa: E501

        :param id: The id of this Task.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search(r'^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$/`")  # noqa: E501

        self._id = id

    @property
    def request_id(self):
        """Gets the request_id of this Task.

        プロビジョニング要求の ID  # noqa: E501

        :return: The request_id of this Task.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Task.

        プロビジョニング要求の ID  # noqa: E501

        :param request_id: The request_id of this Task.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501
        if request_id is not None and not re.search(r'^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$', request_id):  # noqa: E501
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/^[0-9A-Za-z!$%()*\-.\/=?@\[\]^_`{|}~]+$/`")  # noqa: E501

        self._request_id = request_id

    @property
    def name(self):
        """Gets the name of this Task.

        タスクの名称。  # noqa: E501

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        タスクの名称。  # noqa: E501

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def prov_setting_name(self):
        """Gets the prov_setting_name of this Task.

        生成元となったプロビジョニング設定の名称。  # noqa: E501

        :return: The prov_setting_name of this Task.
        :rtype: str
        """
        return self._prov_setting_name

    @prov_setting_name.setter
    def prov_setting_name(self, prov_setting_name):
        """Sets the prov_setting_name of this Task.

        生成元となったプロビジョニング設定の名称。  # noqa: E501

        :param prov_setting_name: The prov_setting_name of this Task.
        :type prov_setting_name: str
        """

        self._prov_setting_name = prov_setting_name

    @property
    def result(self):
        """Gets the result of this Task.

        タスクの実行結果を表す。  # noqa: E501

        :return: The result of this Task.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Task.

        タスクの実行結果を表す。  # noqa: E501

        :param result: The result of this Task.
        :type result: str
        """
        allowed_values = ["waiting", "completed", "failed", "canceled", "stopped"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def task_type(self):
        """Gets the task_type of this Task.

        操作命令の分類。  # noqa: E501

        :return: The task_type of this Task.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.

        操作命令の分類。  # noqa: E501

        :param task_type: The task_type of this Task.
        :type task_type: str
        """
        allowed_values = ["AddModify", "Delete"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def operations(self):
        """Gets the operations of this Task.


        :return: The operations of this Task.
        :rtype: List[TaskOperation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Task.


        :param operations: The operations of this Task.
        :type operations: List[TaskOperation]
        """

        self._operations = operations

    @property
    def registerd_datetime(self):
        """Gets the registerd_datetime of this Task.

        タスクの登録日時  # noqa: E501

        :return: The registerd_datetime of this Task.
        :rtype: datetime
        """
        return self._registerd_datetime

    @registerd_datetime.setter
    def registerd_datetime(self, registerd_datetime):
        """Sets the registerd_datetime of this Task.

        タスクの登録日時  # noqa: E501

        :param registerd_datetime: The registerd_datetime of this Task.
        :type registerd_datetime: datetime
        """

        self._registerd_datetime = registerd_datetime

    @property
    def first_executed_date_time(self):
        """Gets the first_executed_date_time of this Task.

        タスクの初回試行日時  # noqa: E501

        :return: The first_executed_date_time of this Task.
        :rtype: datetime
        """
        return self._first_executed_date_time

    @first_executed_date_time.setter
    def first_executed_date_time(self, first_executed_date_time):
        """Sets the first_executed_date_time of this Task.

        タスクの初回試行日時  # noqa: E501

        :param first_executed_date_time: The first_executed_date_time of this Task.
        :type first_executed_date_time: datetime
        """

        self._first_executed_date_time = first_executed_date_time

    @property
    def last_executed_date_time(self):
        """Gets the last_executed_date_time of this Task.

        タスクの最終試行日時  # noqa: E501

        :return: The last_executed_date_time of this Task.
        :rtype: datetime
        """
        return self._last_executed_date_time

    @last_executed_date_time.setter
    def last_executed_date_time(self, last_executed_date_time):
        """Sets the last_executed_date_time of this Task.

        タスクの最終試行日時  # noqa: E501

        :param last_executed_date_time: The last_executed_date_time of this Task.
        :type last_executed_date_time: datetime
        """

        self._last_executed_date_time = last_executed_date_time

    @property
    def executed_times(self):
        """Gets the executed_times of this Task.

        タスクの試行回数  # noqa: E501

        :return: The executed_times of this Task.
        :rtype: int
        """
        return self._executed_times

    @executed_times.setter
    def executed_times(self, executed_times):
        """Sets the executed_times of this Task.

        タスクの試行回数  # noqa: E501

        :param executed_times: The executed_times of this Task.
        :type executed_times: int
        """

        self._executed_times = executed_times

    @property
    def failed_data(self):
        """Gets the failed_data of this Task.


        :return: The failed_data of this Task.
        :rtype: str
        """
        return self._failed_data

    @failed_data.setter
    def failed_data(self, failed_data):
        """Sets the failed_data of this Task.


        :param failed_data: The failed_data of this Task.
        :type failed_data: str
        """

        self._failed_data = failed_data

    @property
    def logs(self):
        """Gets the logs of this Task.


        :return: The logs of this Task.
        :rtype: List[TaskLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Task.


        :param logs: The logs of this Task.
        :type logs: List[TaskLog]
        """

        self._logs = logs
