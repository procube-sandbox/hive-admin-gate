---
ansible_python_interpreter: /root/consul/bin/python
saml_certs_dir: "{{ hive_context_dir }}/saml-certs"
CN: "saml"
saml_cert: "{{ lookup('file', saml_certs_dir + '/' + CN + '_cert.pem') }}"
saml_serial: "{{ lookup('pipe', 'openssl x509 -in ' + saml_certs_dir + '/saml_cert.pem -noout -serial') | regex_replace('serial=','') }}"
saml_key: "{{ lookup('file', saml_certs_dir + '/' + CN + '_key.pem') }}"
saml_cert_stripped: "{{ saml_cert | replace('-----BEGIN CERTIFICATE-----\n','') | replace('-----END CERTIFICATE-----','') }}"

webgate_monitor_sp:
  key: "SamlSps/monitor.{{ domain }}"
  value:
    fqdn: "monitor.{{ domain }}"
    idpEntityId: "https://auth.{{ domain }}/idp/shibboleth"
    uidAttrName: uid
    certificateFqdn: "sp-dummy.{{ domain }}"
    accessControl: "<Rule require='HTTP_REMOTEGROUP'>IDM_ADMIN</Rule>"
    checkAddress: "none"  
webgate_monitor_proxy:
  key: "proxyPasses/monitor10052"
  value:
    authentication: saml
    pathPattern: /
    protocol: http
    scheduler: ss
    service: monitor10052
    upstreams:
    - "{{ hostvars[groups['repository'] | intersect(groups[hive_stage]) | first].hive_private_ip }}:10052"
    virtualHost: monitor
webgate_monitor_virtualhost:
  key: "virtualHosts/monitor"
  value:
    fqdn: "monitor.{{ domain }}"
    checkFQDN: true
    certificateFqdn: "monitor.{{ domain }}"
    name: monitor
    useWildcard: false
    verifySslClient: off
    vsvcPrefix: global

webgate_kv_samlsps: >-
  {%- set output_services = [webgate_monitor_sp, webgate_monitor_virtualhost] -%}
  {%- for s in groups['services'] | intersect(groups[hive_stage]) -%}
    {%- set labels = (hostvars[s].hive_labels | default({})) -%}
    {%- if (labels.webgate.authentication | default("none")) == "saml"  or
           (labels.webgate.proxies | default([]) | selectattr('authentication', 'defined') | selectattr('authentication', 'eq', 'saml') | list | length) > 0 -%}
      {%- set published_name = (labels.published_name | default(s)) -%}
      {%- set value = {
          "fqdn": published_name + "." + domain,
          "idpEntityId": "https://auth." + domain + "/idp/shibboleth",
          "uidAttrName": "uid",
          "checkAddress": "none",
          "certificateFqdn": "sp-dummy." + domain
      } -%}
      {% if labels.webgate.access_control is defined -%}
        {%- set _ = value.update({"accessControl": labels.webgate.access_control}) -%}
      {%- endif -%}
      {%- set _ = output_services.append({
        "key": "SamlSps/" + published_name + "." + domain,
        "value": value
      }) -%}
    {%- endif -%}
  {%- endfor -%}
  {{ output_services }}

webgate_kv_proxies: >-
  {%- set output_services = [webgate_monitor_proxy] -%}
  {%- for s in groups['services'] | intersect(groups[hive_stage]) -%}
    {%- set labels = (hostvars[s].hive_labels | default({})) -%}
    {%- if labels.webgate is defined -%}
      {%- set published_name = (labels.published_name | default(s)) -%}
      {%- for p in labels.webgate.proxies -%}
        {%- set portname = (p.setService if p.setService is defined else s) + 
            (p.target_port | string) +
            (p.target_protocol | default('http')) +
            (p.postfix if p.postfix is defined else '') -%}
        {%- set value = {
            "authentication": (p.authentication | default(labels.webgate.authentication | default("none"))),
            "pathPattern": (p.pathPattern | default("/")),
            "protocol": (p.target_protocol | default("http")),
            "scheduler": "ss",
            "service": portname,
            "upstreams": [(p.setService if p.setService is defined else s) + ':' + (p.target_port | string)],
            "virtualHost": published_name,
            "maxBodySize": (p.maxBodySize | default(1))
            } -%}
        {%- if p.corsSitesPattern is defined %}{% set _ = value.update({"corsSitesPattern": p.corsSitesPattern}) %}{% endif -%}
        {%- if p.corsAllowHeaders is defined %}{% set _ = value.update({"corsAllowHeaders": p.corsAllowHeaders}) %}{% endif -%}
        {%- if p.corsExporseHeaders is defined %}{% set _ = value.update({"corsExporseHeaders": p.corsExporseHeaders}) %}{% endif -%}
        {%- if p.useWebSocket is defined %}{% set _ = value.update({"useWebSocket": p.useWebSocket}) %}{% endif -%}
        {%- if p.readTimeout is defined %}{% set _ = value.update({"readTimeout": p.readTimeout}) %}{% endif -%}
        {%- set _ = output_services.append({
          "key": "proxyPasses/" + portname,
          "value": value
          }) -%}
        {%- if p.impersonate is defined -%}
          {%- set _ = p.impersonate.update({"name": portname}) -%}
          {%- set _ = output_services.append({
            "key": "Impersonations/" + portname,
            "value": p.impersonate
          }) -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set _ = output_services.append({
        "key": "virtualHosts/" + published_name,
        "value": {
          "fqdn":  published_name + "." + domain,
          "checkFQDN": true,
          "certificateFqdn":  published_name + "." + domain,
          "name": published_name,
          "useWildcard": false,
          "verifySslClient": "off",
          "vsvcPrefix": "global"
          }
        }) -%}
    {%- endif -%}
  {%- endfor -%}
  {{ output_services }}

webgate_kv_common:
  - key: "attributes/HTTP_REMOTEGROUP"
    value:
      name: HTTP_REMOTEGROUP
      source: idmRole
      type: StringAttributeDecoder
  - key: "attributes/HTTP_USER"
    value:
      name: HTTP_REMOTEUSER
      source: uid
      type: StringAttributeDecoder
  - key: "attributes/uid"
    value:
      name: uid
      source: uid
      type: StringAttributeDecoder
  - key: "certificates/sp-dummy.{{ domain }}"
    value:
      fqdn: "sp-dummy.{{ domain }}"
      # this is intentional spelling miss to match WG2
      cerificate: |
        -----BEGIN CERTIFICATE-----
        {{ saml_cert_stripped }}-----END CERTIFICATE-----
      privateKey: "{{ saml_key }}"
      serialNumber: "{{ saml_serial }}"
  - key: "metadatas/idp"
    value:
      metadata: |
        <?xml version="1.0" encoding="UTF-8"?>
        <EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata"
            xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:shibmd="urn:mace:shibboleth:metadata:1.0"
            xmlns:xml="http://www.w3.org/XML/1998/namespace"
            xmlns:mdui="urn:oasis:names:tc:SAML:metadata:ui"
            entityID="https://auth.{{ domain }}/idp/shibboleth">

            <IDPSSODescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0">
        <!--
                <Extensions>
                    <shibmd:Scope regexp="false">auth.{{ domain }}</shibmd:Scope>
                    <mdui:UIInfo>
                        <mdui:DisplayName xml:lang="en">XXXXXX A Name for the IdP XXXXXX</mdui:DisplayName>
                        <mdui:Description xml:lang="en">XXXXXX Enter a description of your IdP XXXXXX</mdui:Description>
                        <mdui:Logo height="HeightInPixels" width="WidthInPixels">XXXXXX https://auth.{{ domain }}/Path/To/Logo.png XXXXXX</mdui:Logo>
                    </mdui:UIInfo>
                </Extensions>
        -->
                <KeyDescriptor>
        <ds:KeyInfo>
        <ds:X509Data>
        <ds:X509Certificate>
        {{ saml_cert_stripped }}
        </ds:X509Certificate>
        </ds:X509Data>
        </ds:KeyInfo>
                </KeyDescriptor>
                <ArtifactResolutionService Binding="urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding"
                    Location="https://auth.{{ domain }}/idp/profile/SAML1/SOAP/ArtifactResolution"
                    index="1"/>
                <ArtifactResolutionService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"
                    Location="https://auth.{{ domain }}/idp/profile/SAML2/SOAP/ArtifactResolution"
                    index="2"/>
                <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="https://auth.{{ domain }}/idp/profile/SAML2/Redirect/SLO"/>
                <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://auth.{{ domain }}/idp/profile/SAML2/POST/SLO"/>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</NameIDFormat>
                <NameIDFormat xmlns="urn:oasis:names:tc:SAML:2.0:metadata">urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>

                <SingleSignOnService Binding="urn:mace:shibboleth:1.0:profiles:AuthnRequest"
                    Location="https://auth.{{ domain }}/idp/profile/Shibboleth/SSO"/>
                <SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
                    Location="https://auth.{{ domain }}/idp/profile/SAML2/POST/SSO"/>
                <SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign"
                    Location="https://auth.{{ domain }}/idp/profile/SAML2/POST-SimpleSign/SSO"/>
                <SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
                    Location="https://auth.{{ domain }}/idp/profile/SAML2/Redirect/SSO"/>
            </IDPSSODescriptor>

            <AttributeAuthorityDescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol">
                <Extensions>
                    <shibmd:Scope regexp="false">auth.{{ domain }}</shibmd:Scope>
                </Extensions>
                <KeyDescriptor>
        <ds:KeyInfo>
        <ds:X509Data>
        <ds:X509Certificate>
        {{ saml_cert_stripped }}
        </ds:X509Certificate>
        </ds:X509Data>
        </ds:KeyInfo>
                </KeyDescriptor>
                <AttributeService Binding="urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding"
                    Location="https://auth.{{ domain }}/idp/profile/SAML1/SOAP/AttributeQuery"/>
                <AttributeService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"
                    Location="https://auth.{{ domain }}/idp/profile/SAML2/SOAP/AttributeQuery"/>
            </AttributeAuthorityDescriptor>
        </EntityDescriptor>
      name: idp

webgate_kv: "{{ webgate_kv_common + webgate_kv_proxies + webgate_kv_samlsps }}"
