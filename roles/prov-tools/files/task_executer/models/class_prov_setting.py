# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer.models.class_prov_property import ClassProvProperty
from task_executer import util

from task_executer.models.class_prov_property import ClassProvProperty  # noqa: E501

class ClassProvSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, class_name=None, properties=None, filter=None, template_dn=None, working_dir=None, csv_naming_rule=None, exec_command=None, tables_name=None, primary_column=None, no_decryption=None):  # noqa: E501
        """ClassProvSetting - a model defined in OpenAPI

        :param type: The type of this ClassProvSetting.  # noqa: E501
        :type type: str
        :param class_name: The class_name of this ClassProvSetting.  # noqa: E501
        :type class_name: str
        :param properties: The properties of this ClassProvSetting.  # noqa: E501
        :type properties: List[ClassProvProperty]
        :param filter: The filter of this ClassProvSetting.  # noqa: E501
        :type filter: str
        :param template_dn: The template_dn of this ClassProvSetting.  # noqa: E501
        :type template_dn: str
        :param working_dir: The working_dir of this ClassProvSetting.  # noqa: E501
        :type working_dir: str
        :param csv_naming_rule: The csv_naming_rule of this ClassProvSetting.  # noqa: E501
        :type csv_naming_rule: str
        :param exec_command: The exec_command of this ClassProvSetting.  # noqa: E501
        :type exec_command: str
        :param tables_name: The tables_name of this ClassProvSetting.  # noqa: E501
        :type tables_name: str
        :param primary_column: The primary_column of this ClassProvSetting.  # noqa: E501
        :type primary_column: str
        :param no_decryption: The no_decryption of this ClassProvSetting.  # noqa: E501
        :type no_decryption: bool
        """
        self.openapi_types = {
            'type': str,
            'class_name': str,
            'properties': List[ClassProvProperty],
            'filter': str,
            'template_dn': str,
            'working_dir': str,
            'csv_naming_rule': str,
            'exec_command': str,
            'tables_name': str,
            'primary_column': str,
            'no_decryption': bool
        }

        self.attribute_map = {
            'type': 'type',
            'class_name': 'className',
            'properties': 'properties',
            'filter': 'filter',
            'template_dn': 'templateDn',
            'working_dir': 'workingDir',
            'csv_naming_rule': 'csvNamingRule',
            'exec_command': 'execCommand',
            'tables_name': 'tablesName',
            'primary_column': 'primaryColumn',
            'no_decryption': 'noDecryption'
        }

        self._type = type
        self._class_name = class_name
        self._properties = properties
        self._filter = filter
        self._template_dn = template_dn
        self._working_dir = working_dir
        self._csv_naming_rule = csv_naming_rule
        self._exec_command = exec_command
        self._tables_name = tables_name
        self._primary_column = primary_column
        self._no_decryption = no_decryption

    @classmethod
    def from_dict(cls, dikt) -> 'ClassProvSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _classProvSetting of this ClassProvSetting.  # noqa: E501
        :rtype: ClassProvSetting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ClassProvSetting.


        :return: The type of this ClassProvSetting.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClassProvSetting.


        :param type: The type of this ClassProvSetting.
        :type type: str
        """

        self._type = type

    @property
    def class_name(self):
        """Gets the class_name of this ClassProvSetting.

        対象となるクラス名  # noqa: E501

        :return: The class_name of this ClassProvSetting.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ClassProvSetting.

        対象となるクラス名  # noqa: E501

        :param class_name: The class_name of this ClassProvSetting.
        :type class_name: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def properties(self):
        """Gets the properties of this ClassProvSetting.


        :return: The properties of this ClassProvSetting.
        :rtype: List[ClassProvProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ClassProvSetting.


        :param properties: The properties of this ClassProvSetting.
        :type properties: List[ClassProvProperty]
        """

        self._properties = properties

    @property
    def filter(self):
        """Gets the filter of this ClassProvSetting.

        フィルタ式 - 対象となるオブジェクトを抽出する問い合わせ式を文字列で指定する。省略された場合、このクラスの全てのオブジェクトが処理対象となる。  # noqa: E501

        :return: The filter of this ClassProvSetting.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ClassProvSetting.

        フィルタ式 - 対象となるオブジェクトを抽出する問い合わせ式を文字列で指定する。省略された場合、このクラスの全てのオブジェクトが処理対象となる。  # noqa: E501

        :param filter: The filter of this ClassProvSetting.
        :type filter: str
        """

        self._filter = filter

    @property
    def template_dn(self):
        """Gets the template_dn of this ClassProvSetting.

        テンプレートとなるオブジェクトのDNを指定する。  # noqa: E501

        :return: The template_dn of this ClassProvSetting.
        :rtype: str
        """
        return self._template_dn

    @template_dn.setter
    def template_dn(self, template_dn):
        """Sets the template_dn of this ClassProvSetting.

        テンプレートとなるオブジェクトのDNを指定する。  # noqa: E501

        :param template_dn: The template_dn of this ClassProvSetting.
        :type template_dn: str
        """

        self._template_dn = template_dn

    @property
    def working_dir(self):
        """Gets the working_dir of this ClassProvSetting.

        種別が SSH+CSV であるときに CSVファイルを置くディレクトリ - 省略時は、ホームディレクトリを示す ~  # noqa: E501

        :return: The working_dir of this ClassProvSetting.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this ClassProvSetting.

        種別が SSH+CSV であるときに CSVファイルを置くディレクトリ - 省略時は、ホームディレクトリを示す ~  # noqa: E501

        :param working_dir: The working_dir of this ClassProvSetting.
        :type working_dir: str
        """

        self._working_dir = working_dir

    @property
    def csv_naming_rule(self):
        """Gets the csv_naming_rule of this ClassProvSetting.

        種別が SSH+CSV であるときに生成する CSV ファイルの命名規則 - %id%, %registerdDatetime%, %currentDatetime% をパラメータとして指定可能 - %id% ：プロビジョニングタスク (_task) のID (id) を埋め込む - %registerdDatetime% ：プロビジョニングタスク (_task) の登録日時 (registerdDatetime) を埋め込む - %currentDatetime% ：プロビジョニング実行時の現在日時を埋め込む - %id%, %currentDatetime% の日時は java の java.text.SimpleDateFormat でフォーマットに [yyyyMMddHHmmssSSS] を指定した形式とする - 省略時は、\"クラス名.csv\"  # noqa: E501

        :return: The csv_naming_rule of this ClassProvSetting.
        :rtype: str
        """
        return self._csv_naming_rule

    @csv_naming_rule.setter
    def csv_naming_rule(self, csv_naming_rule):
        """Sets the csv_naming_rule of this ClassProvSetting.

        種別が SSH+CSV であるときに生成する CSV ファイルの命名規則 - %id%, %registerdDatetime%, %currentDatetime% をパラメータとして指定可能 - %id% ：プロビジョニングタスク (_task) のID (id) を埋め込む - %registerdDatetime% ：プロビジョニングタスク (_task) の登録日時 (registerdDatetime) を埋め込む - %currentDatetime% ：プロビジョニング実行時の現在日時を埋め込む - %id%, %currentDatetime% の日時は java の java.text.SimpleDateFormat でフォーマットに [yyyyMMddHHmmssSSS] を指定した形式とする - 省略時は、\"クラス名.csv\"  # noqa: E501

        :param csv_naming_rule: The csv_naming_rule of this ClassProvSetting.
        :type csv_naming_rule: str
        """

        self._csv_naming_rule = csv_naming_rule

    @property
    def exec_command(self):
        """Gets the exec_command of this ClassProvSetting.

        種別が SSH+CSV であるときに実行するスクリプト - 引数に CSV 命名規則 (csvNamingRule) を元に生成した CSV ファイル名を指定して実行する - 省略時は、ファイル転送のみ行う。  # noqa: E501

        :return: The exec_command of this ClassProvSetting.
        :rtype: str
        """
        return self._exec_command

    @exec_command.setter
    def exec_command(self, exec_command):
        """Sets the exec_command of this ClassProvSetting.

        種別が SSH+CSV であるときに実行するスクリプト - 引数に CSV 命名規則 (csvNamingRule) を元に生成した CSV ファイル名を指定して実行する - 省略時は、ファイル転送のみ行う。  # noqa: E501

        :param exec_command: The exec_command of this ClassProvSetting.
        :type exec_command: str
        """

        self._exec_command = exec_command

    @property
    def tables_name(self):
        """Gets the tables_name of this ClassProvSetting.

        種別が RDB であるときに更新するテーブル名  # noqa: E501

        :return: The tables_name of this ClassProvSetting.
        :rtype: str
        """
        return self._tables_name

    @tables_name.setter
    def tables_name(self, tables_name):
        """Sets the tables_name of this ClassProvSetting.

        種別が RDB であるときに更新するテーブル名  # noqa: E501

        :param tables_name: The tables_name of this ClassProvSetting.
        :type tables_name: str
        """

        self._tables_name = tables_name

    @property
    def primary_column(self):
        """Gets the primary_column of this ClassProvSetting.

        種別が RDB であるときに更新するテーブルの主キーの列名。 UPDATE, DELETE のクエリ生成で WHERE 句に指定する。 - 省略時は、追記のみが false の場合はプロビジョニング操作命令の命令コード add の場合に INSERT のみ行う。  # noqa: E501

        :return: The primary_column of this ClassProvSetting.
        :rtype: str
        """
        return self._primary_column

    @primary_column.setter
    def primary_column(self, primary_column):
        """Sets the primary_column of this ClassProvSetting.

        種別が RDB であるときに更新するテーブルの主キーの列名。 UPDATE, DELETE のクエリ生成で WHERE 句に指定する。 - 省略時は、追記のみが false の場合はプロビジョニング操作命令の命令コード add の場合に INSERT のみ行う。  # noqa: E501

        :param primary_column: The primary_column of this ClassProvSetting.
        :type primary_column: str
        """

        self._primary_column = primary_column

    @property
    def no_decryption(self):
        """Gets the no_decryption of this ClassProvSetting.

        暗号化設定で AES 暗号が指定された属性について、復号化を行わないことを指定するフラグ  # noqa: E501

        :return: The no_decryption of this ClassProvSetting.
        :rtype: bool
        """
        return self._no_decryption

    @no_decryption.setter
    def no_decryption(self, no_decryption):
        """Sets the no_decryption of this ClassProvSetting.

        暗号化設定で AES 暗号が指定された属性について、復号化を行わないことを指定するフラグ  # noqa: E501

        :param no_decryption: The no_decryption of this ClassProvSetting.
        :type no_decryption: bool
        """

        self._no_decryption = no_decryption
