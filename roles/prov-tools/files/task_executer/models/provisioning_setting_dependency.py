# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from task_executer.models.base_model_ import Model
from task_executer import util


class ProvisioningSettingDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, task_type=None):  # noqa: E501
        """ProvisioningSettingDependency - a model defined in OpenAPI

        :param name: The name of this ProvisioningSettingDependency.  # noqa: E501
        :type name: str
        :param task_type: The task_type of this ProvisioningSettingDependency.  # noqa: E501
        :type task_type: str
        """
        self.openapi_types = {
            'name': str,
            'task_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'task_type': 'taskType'
        }

        self._name = name
        self._task_type = task_type

    @classmethod
    def from_dict(cls, dikt) -> 'ProvisioningSettingDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _provisioningSettingDependency of this ProvisioningSettingDependency.  # noqa: E501
        :rtype: ProvisioningSettingDependency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProvisioningSettingDependency.

        プロビジョニング設定の名前  # noqa: E501

        :return: The name of this ProvisioningSettingDependency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisioningSettingDependency.

        プロビジョニング設定の名前  # noqa: E501

        :param name: The name of this ProvisioningSettingDependency.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def task_type(self):
        """Gets the task_type of this ProvisioningSettingDependency.

        操作命令の分類  # noqa: E501

        :return: The task_type of this ProvisioningSettingDependency.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this ProvisioningSettingDependency.

        操作命令の分類  # noqa: E501

        :param task_type: The task_type of this ProvisioningSettingDependency.
        :type task_type: str
        """
        allowed_values = ["AddModify", "Delete"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"
                .format(task_type, allowed_values)
            )

        self._task_type = task_type
